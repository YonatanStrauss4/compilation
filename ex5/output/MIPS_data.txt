.data

	string_access_violation: .asciiz "Access Violation"
	string_illegal_div_by_0: .asciiz "Illegal Division By Zero"
	string_invalid_ptr_dref: .asciiz "Invalid Pointer Dereference"

	# Global variables

	 max: .word 32767
	 min: .word -32768
	str_Having: .asciiz "Having"
	g_s1: .word str_Having
	str_said: .asciiz "said"
	g_s2: .word str_said
	str_that: .asciiz "that"
	g_s3: .word str_that
	str_Citroen: .asciiz "Citroen"

.text


.globl allocateStringSpace
allocateStringSpace:
	addi $sp, $sp, -12
	sw $ra, 8($sp)
	sw $s0, 4($sp)
	sw $s1, 0($sp)
	move $s0, $a1
	move $s1, $a2
	li $t0, 0
alloc_str_len1:
	lb $s3, 0($s0)
	beq $s3, $zero, alloc_str_len2
	addiu $t0, $t0, 1
	addiu $s0, $s0, 1
	j alloc_str_len1
alloc_str_len2:
	lb $s3, 0($s1)
	beq $s3, $zero, alloc_str_done
	addiu $t0, $t0, 1
	addiu $s1, $s1, 1
	j alloc_str_len2
alloc_str_done:
	addiu $t0, $t0, 1
	move $a0, $t0
	li $v0, 9
	syscall
	lw $ra, 8($sp)
	lw $s0, 4($sp)
	lw $s1, 0($sp)
	addi $sp, $sp, 12
	jr $ra


.globl addStrings
addStrings:
	addi $sp, $sp, -20
	sw $ra, 16($sp)
	sw $s0, 12($sp)
	sw $s1, 8($sp)
	sw $s2, 4($sp)
	sw $s3, 0($sp)
	move $s0, $a1
	move $s1, $a2
	move $s3, $a0
str_concat_loop1:
	lb $s2, 0($s0)
	beq $s2, $zero, str_concat_loop2
	sb $s2, 0($s3)
	addiu $s0, $s0, 1
	addiu $s3, $s3, 1
	j str_concat_loop1
str_concat_loop2:
	lb $s2, 0($s1)
	beq $s2, $zero, str_concat_done
	sb $s2, 0($s3)
	addiu $s1, $s1, 1
	addiu $s3, $s3, 1
	j str_concat_loop2
str_concat_done:
	sb $zero, 0($s3)
	lw $ra, 16($sp)
	lw $s0, 12($sp)
	lw $s1, 8($sp)
	lw $s2, 4($sp)
	lw $s3, 0($sp)
	addi $sp, $sp, 20
	jr $ra


string_equality:
	li $v0, 1
	move $s0, $a0
	move $s1, $a1
str_eq_loop:
	lb $s2, 0($s0)
	lb $s3, 0($s1)
	bne $s2, $s3, neq_label
	beq $s2, 0, str_eq_end
	addu $s0, $s0, 1
	addu $s1, $s1, 1
	j str_eq_loop
neq_label:
	li $v0, 0
str_eq_end:
	jr $ra

check_bounds:
	lw $s0, min
	lw $s1, max
	ble $a0, $s1, checkBoundsMin
	move  $a0, $s1
checkBoundsMin:
	bge $a0, $s0, checkBoundsReturn
	move  $a0, $s0
checkBoundsReturn:
	jr $ra

floor_fix:
	beq $s3, $zero, return_floor_fix
	xor $s4, $s0, $s1
	bltz $s4, adjust_floor
return_floor_fix:
	jr $ra
adjust_floor:
	sub $s2, $s2, 1
	j return_floor_fix

	abort_access_violation:
	la $s0, string_access_violation

	# inline implementation of PrintString:
	move $a0, $s0
	li $v0, 4
	syscall
	li $v0, 10
	syscall

	abort_illegal_division_by_0:
	la $s0, string_illegal_div_by_0

	# inline implementation of PrintString:
	move $a0, $s0
	li $v0, 4
	syscall
	li $v0, 10
	syscall

	abort_invalid_ptr_dref:
	la $s0, string_invalid_ptr_dref

	# inline implementation of PrintString:
	move $a0, $s0
	li $v0, 4
	syscall
	li $v0, 10
	syscall

